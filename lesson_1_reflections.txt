q. How did viewing a diff between two versions 
of a file help you see the bug that was introduced?

a. By using the diff function, it was much easier
to pinpoint the exact location of differences 
between the original code and the reworked code.
Using diff -u was more helpful than simply diff.
This flag gives three lines of context.

q. How could having easy access to the entire history
of a file make you a more efficient programmer in the long-term?

a. All work that I have done will exist in some format somewhere.
If i create a more buggy version of code, I can revert back to 
a version with no bugs. If a certain piece of code becomes 
redundant, but then later on I need to use it in a new piece
of code, I can go back and look at the old version.

q.What do you think are the pros and cons of manually choosing
when to create a commit, like you do in Git, vs having versions
automatically saved, like Google Docs does?

a. The commits correspond to logical break points, so one 
feature will have its own commit. If this feature causes a 
bug then all that needs to be looked at, is the one commit.
A nice history of how the project has progressed will also
be kept, with milestones shown, rather than random save points.

q.Why do you think some version control systems, like Git, allow 
saving multiple files in one commit, while others, like Google 
Docs, treat each file separately?

a.Git allows users to save interlinked files as it was built 
with coding in mind. A new feature may affect 3 different files
in a repository, so they need to be saved as part of the same 
commit. In other platforms they are built for easier usability,
so they save files automatically for users to look back at.

q. How can you use the commands git log and git diff to view the history of files?

a. Git log allows me to see the complete commit history of a
file. Git diff then allows me to compare different commits.

q. How might using version control make you more confident to 
make changes that could break something?

a. Knowing that i can revert to a version where there are no 
bugs or issues means it doesnt matter so much if i mess up. Also 
means that it is easier to find where bugs are introduced 
retrospectively

q. Now that you have your workspace set up, what do you want to 
try using Git for?

a. I will be using it in my job that I start next week, which is 
the main incentive. Hopefully at some stage I'll be doing 
projects of my own